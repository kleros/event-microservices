service: event-microservices
provider:
  name: aws
  runtime: nodejs12.x
  stage: '${opt:stage, self:custom.defaultStage}'
  region: us-east-2
package:
  exclude:
    - .env
environment:
  AWS_REGION: '${self:provider.region}'
plugins:
  - serverless-kms-secrets
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
custom:
  defaultStage: staging
  environments:
    staging: STAGING
    production: PRODUCTION
  serverless-kms-secrets:
    secretsFile: 'kms-secrets.${self:provider.region}.yml'
  kmsSecrets: '${file(kms-secrets.${self:provider.region}.yml)}'
  documentation:
    info:
      version: '1'
      title: 'Event Microservices'
      description: 'Handler functions for Ethereum events.'
    resources:
      - {
          path: event-handlers,
          description: 'Microservice that handles event logs from the blockchain.',
        }
      - {
          path: tromazo-handlers,
          description: "Microservice that handles event logs from Kleros' tromazo event service.",
        }
    models:
      - {
          name: ErrorResponse,
          description: 'An error response.',
          contentType: application/json,
          schema: '${file(src/models/error.json)}',
        }
      - {
          name: PostEventHandlersHandlerRequest,
          description: 'The request for postEventHandlers.',
          contentType: application/json,
          schema: '${file(src/models/event-schema.json):post.request}',
        }
      - {
          name: PostTromazoHandlersHandlerRequest,
          description: 'The request for postTromazoHandlers.',
          contentType: application/json,
          schema: '${file(src/models/tromazo-schema.json):post.request}',
        }
functions:
  postEventHandlersExampleEmail:
    handler: src/event-handlers/example-email.post
    events:
      - {
          http: { path: event-handler-example-email, method: post, cors: true },
        }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
    iamRoleStatementsName: 'eventHandlerExampleEmail-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postKlerosLiquid:
    handler: src/event-handlers/kleros-liquid-emails.post
    events:
      - {
          http:
            {
              path: event-handler-kleros-liquid-emails,
              method: post,
              cors: true,
            },
        }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      KLEROS_LIQUID_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_KLEROS_LIQUID_ADDRESS}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
    iamRoleStatementsName: 'postKlerosLiquid-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postEventHandlersT2CREmails:
    handler: src/event-handlers/t2cr-emails.post
    events:
      - { http: { path: event-handler-t2cr-emails, method: post, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      T2CR_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_T2CR_ADDRESS}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
    iamRoleStatementsName: 'postEventHandlersT2CREmails-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postEventHandlersBadgeEmails:
    handler: src/event-handlers/badge-emails.post
    events:
      - { http: { path: event-handler-badge-emails, method: post, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      BADGE_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_BADGE_ADDRESS}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
    iamRoleStatementsName: 'postEventHandlersBadgeEmails-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postEventHandlersEscrowEmails:
    handler: src/event-handlers/escrow-emails.post
    events:
      - {
          http: { path: event-handler-escrow-emails, method: post, cors: true },
        }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      ESCROW_CONTRACT_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_ESCROW_ADDRESS}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
    iamRoleStatementsName: 'postEventHandlersEscrowEmails-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postEventHandlersCourtSMS:
    handler: src/event-handlers/court-sms.post
    events:
      - { http: { path: event-handler-court-sms, method: post, cors: true } }
    iamRoleStatementsName: 'postEventHandlersCourtSMS-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - { Effect: Allow, Action: ['sns:Publish'], Resource: '*' }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem', 'dynamodb:UpdateItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postEventHandlersCourtEmails:
    handler: src/event-handlers/court-emails.post
    events:
      - { http: { path: event-handler-court-emails, method: post, cors: true } }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      PRIVATE_KEY: '${self:custom.kmsSecrets.secrets.PRIVATE_KEY}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
      KLEROS_LIQUID_ADDRESS_KOVAN: '${self:custom.kmsSecrets.secrets.STAGING_KLEROS_LIQUID_ADDRESS}'
      KLEROS_LIQUID_ADDRESS_MAINNET: '${self:custom.kmsSecrets.secrets.PRODUCTION_KLEROS_LIQUID_ADDRESS}'
      VAPID_KEY: '${self:custom.kmsSecrets.secrets.VAPID_KEY}'
      VAPID_PUB: '${self:custom.kmsSecrets.secrets.VAPID_PUB}'
    iamRoleStatementsName: 'postEventHandlersCourtEmails-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
  postTromazoHandlersPOH:
    handler: src/tromazo-handlers/proof-of-humanity.post
    events:
      - {
          http:
            {
              path: tromazo-handler-proof-of-humanity,
              method: post,
              cors: true,
            },
        }
    environment:
      INFURA_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_INFURA_URL}'
      PRIVATE_KEY: '${self:custom.kmsSecrets.secrets.PRIVATE_KEY}'
      SENDGRID_API_KEY: '${self:custom.kmsSecrets.secrets.SENDGRID_API_KEY}'
      PROOF_OF_HUMANITY_SUBGRAPH_URL: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_PROOF_OF_HUMANITY_SUBGRAPH_URL}'
      PROOF_OF_HUMANITY_CONTRACT_ADDRESS: '${self:custom.kmsSecrets.secrets.${self:custom.environments.${self:provider.stage}}_PROOF_OF_HUMANITY_CONTRACT_ADDRESS}'
    iamRoleStatementsName: 'postTromazoHandlersPOH-${self:provider.stage}-lambda-role'
    iamRoleStatements:
      - {
          Effect: Allow,
          Action: ['KMS:Decrypt'],
          Resource: '${self:custom.kmsSecrets.keyArn}',
        }
      - {
          Effect: Allow,
          Action: ['dynamodb:GetItem'],
          Resource: 'arn:aws:dynamodb:us-east-2:547511976516:table/user-settings',
        }
